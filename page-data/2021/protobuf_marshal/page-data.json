{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/protobuf_marshal/","result":{"data":{"site":{"siteMetadata":{"title":"Mason blog","author":"mason ko","siteUrl":"https://mason-ko.github.io","comment":{"disqusShortName":"","utterances":""},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"7bccb3ae-6767-5682-b6cd-457e74c61379","excerpt":"protobuf 에서 proto 의 message 에 정의된 내용을 marshal marshal 은 codec 을 통한 encoding ( codec marshal )  codec 은 기본적으로 newClientStream -> setCallInfoCodec 에서 codec 로 marshal, unmarshal 하여 사용함. encoding.RegisterCodec 함수에 커스텀해서 등록해서 사용할 수 있음 위 인터페이스 만족하면 ok  기본적으로 grpc 의 경우 grpc/encoding…","html":"<h2 id=\"protobuf-에서-proto-의-message-에-정의된-내용을-marshal\" style=\"position:relative;\"><a href=\"#protobuf-%EC%97%90%EC%84%9C-proto-%EC%9D%98-message-%EC%97%90-%EC%A0%95%EC%9D%98%EB%90%9C-%EB%82%B4%EC%9A%A9%EC%9D%84-marshal\" aria-label=\"protobuf 에서 proto 의 message 에 정의된 내용을 marshal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>protobuf 에서 proto 의 message 에 정의된 내용을 marshal</h2>\n<p>marshal 은 codec 을 통한 encoding ( codec marshal ) </p>\n<p>codec 은 기본적으로</p>\n<p>newClientStream -> setCallInfoCodec 에서 codec 로 marshal, unmarshal 하여 사용함.</p>\n<p>encoding.RegisterCodec 함수에 커스텀해서 등록해서 사용할 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Codec <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Marshal returns the wire format of v.</span>\n\t<span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Unmarshal parses the wire format into v.</span>\n\t<span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\t<span class=\"token comment\">// Name returns the name of the Codec implementation. The returned string</span>\n\t<span class=\"token comment\">// will be used as part of content type in transmission.  The result must be</span>\n\t<span class=\"token comment\">// static; the result cannot change between calls.</span>\n\t<span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 인터페이스 만족하면 ok </p>\n<p>기본적으로 grpc 의 경우</p>\n<p>grpc/encoding/proto/proto.go 파일에 있는 marshaler 를 사용하는데 ( Name = “proto” )\n해당 marshaler 에서 protoV2 MarshalAppend 에서 marshal 을 함 ( protobuf api v2 기준 )</p>\n<p>MarshalAppend 안에서 reflect 된 message 기준으로 </p>\n<p>메소드를 찾아 marshal 을 하는데 이때</p>\n<h4 id=\"-정렬된-필드-순서--메시지에-정의한-넘버-순서--대로-buffer-에-값을-넣음-\" style=\"position:relative;\"><a href=\"#-%EC%A0%95%EB%A0%AC%EB%90%9C-%ED%95%84%EB%93%9C-%EC%88%9C%EC%84%9C--%EB%A9%94%EC%8B%9C%EC%A7%80%EC%97%90-%EC%A0%95%EC%9D%98%ED%95%9C-%EB%84%98%EB%B2%84-%EC%88%9C%EC%84%9C--%EB%8C%80%EB%A1%9C-buffer-%EC%97%90-%EA%B0%92%EC%9D%84-%EB%84%A3%EC%9D%8C-\" aria-label=\" 정렬된 필드 순서  메시지에 정의한 넘버 순서  대로 buffer 에 값을 넣음  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>*</strong> 정렬된 필드 순서 ( 메시지에 정의한 넘버 순서 ) 대로 buffer 에 값을 넣음 <strong>*</strong></h4>\n<p>먼저 field 의 offset 을 버퍼에 넣고 그다음 protobuf/internal/impl 안의 각각의 codec type 별로 값을 bytes 로 가져온 후 버퍼에 담음</p>\n<p>이 순서대로 버퍼에 하나씩 값을 넣음</p>\n<p>그렇기 떄문에 number 를 이런형태로 활용하는것을 알 수 있음</p>\n<h3 id=\"field-의-offset-은-무슨-값일까\" style=\"position:relative;\"><a href=\"#field-%EC%9D%98-offset-%EC%9D%80-%EB%AC%B4%EC%8A%A8-%EA%B0%92%EC%9D%BC%EA%B9%8C\" aria-label=\"field 의 offset 은 무슨 값일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>field 의 offset 은 무슨 값일까?</h3>\n<p>위의 메소드를 찾는 부분에서 protoMethod 호출\nmakeCoderMethods 안에서\nfieldOffset 을 가져오는데</p>\n<p>field offset 값은 fieldsByNumber 에 있고 이 값은</p>\n<p>proto message struct init 과정에서 struct field 에 저장이 되있는 태그 ( ex <code class=\"language-text\">protobuf:”xxx”</code>) 값 으로\n순서 결정을 하고 </p>\n<p>offset 은 offsetEmbed >> 1 로 사용됨\n테스트 중인 메시지 값은 offsetEmbed (0, 16, 32, 80, 96, 128) 값이 있었으며</p>\n<p>80 부터 값이 있음 ( state, sizeCache, unknownFields 는 pass 되기 때문에.[0,16,32] )</p>\n<p>고로 80, 96, 128 의 값의 쉬프트 연산 ( >> 1 )으로 인해\n실제 offset 은 40, 48, 64 값으로 되었음을 확인 </p>\n<p>+++ 먼가 대충 써놓은 느낌이라 나중에 정리가 좀 필요할듯</p>","frontmatter":{"title":"protobuf 에서 proto 의 message 에 정의된 내용을 marshal 과정","date":"May 20, 2021"}}},"pageContext":{"slug":"/2021/protobuf_marshal/","previous":{"fields":{"slug":"/2021/spanner_emulator/"},"frontmatter":{"title":"Spanner Emulator 설치하여 실행"}},"next":{"fields":{"slug":"/2021/git_private_repo_access/"},"frontmatter":{"title":"Go Module 에서 접근하는 private git repo 접근 에러 시"}}}},"staticQueryHashes":["2486386679","3128451518"]}