{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022/go_allocate/","result":{"data":{"site":{"siteMetadata":{"title":"Mason blog","author":"mason ko","siteUrl":"https://mason-ko.github.io","comment":{"disqusShortName":"","utterances":""},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"742cbd80-3430-50c6-8005-e3f646e98601","excerpt":"최적화 조기 최적화는 피한다. 프로파일링은 공식 go 블로그 https://go.dev/blog/pprof 를 참조.   이스케이프 분석 Go는 메모리 할당을 자동으로 관리하며 대부분의 할당은 스택을 사용하며 컴파일러가 똑똑함 스택 할당은 저렴 힙 할당은 비싸며 Go…","html":"<h2 id=\"최적화\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최적화</h2>\n<ul>\n<li>조기 최적화는 피한다.</li>\n<li>프로파일링은 공식 go 블로그 <a href=\"https://go.dev/blog/pprof\">https://go.dev/blog/pprof</a> 를 참조.  </li>\n</ul>\n<h2 id=\"이스케이프-분석\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84-%EB%B6%84%EC%84%9D\" aria-label=\"이스케이프 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이스케이프 분석</h2>\n<ul>\n<li>Go는 메모리 할당을 자동으로 관리하며 대부분의 할당은 스택을 사용하며 컴파일러가 똑똑함</li>\n<li>스택 할당은 저렴 힙 할당은 비싸며 Go 는 스택 합당을 선호</li>\n</ul>\n<h2 id=\"힙-할당-확인\" style=\"position:relative;\"><a href=\"#%ED%9E%99-%ED%95%A0%EB%8B%B9-%ED%99%95%EC%9D%B8\" aria-label=\"힙 할당 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙 할당 확인</h2>\n<p><code class=\"language-text\">go build -gcflags '-m'</code> 으로 확인 가능<br>\n<code class=\"language-text\">go build -gcflags '-m -m'</code> 조금 더 디테일한 확인</p>\n<h5 id=\"포인터를-사용해도-함수-내에서-지역적으로-사용되어-종료된다면-힙-할당이-되지-않는다\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%8F%84-%ED%95%A8%EC%88%98-%EB%82%B4%EC%97%90%EC%84%9C-%EC%A7%80%EC%97%AD%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%EB%90%98%EC%96%B4-%EC%A2%85%EB%A3%8C%EB%90%9C%EB%8B%A4%EB%A9%B4-%ED%9E%99-%ED%95%A0%EB%8B%B9%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"포인터를 사용해도 함수 내에서 지역적으로 사용되어 종료된다면 힙 할당이 되지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포인터를 사용해도 함수 내에서 지역적으로 사용되어 종료된다면 힙 할당이 되지 않는다.</h5>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> ii <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n\ti <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n\tii <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ii<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">./main.go:3:6: can inline main</code></pre></div>\n<h5 id=\"반대로-함수에서-생성한-포인터-값을-반환하는-함수라면-힙에-할당됨\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%8C%80%EB%A1%9C-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%EC%83%9D%EC%84%B1%ED%95%9C-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EA%B0%92%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EB%8A%94-%ED%95%A8%EC%88%98%EB%9D%BC%EB%A9%B4-%ED%9E%99%EC%97%90-%ED%95%A0%EB%8B%B9%EB%90%A8\" aria-label=\"반대로 함수에서 생성한 포인터 값을 반환하는 함수라면 힙에 할당됨 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반대로 함수에서 생성한 포인터 값을 반환하는 함수라면 힙에 할당됨.</h5>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\ti <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>i\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">./main.go:3:6: can inline main\n./main.go:7:6: can inline get\n./main.go:8:2: moved to heap: i</code></pre></div>\n<ul>\n<li>채널에 포인터 값 포함 사용 (컴파일 타임에 어떤 고루틴이 채널의 데이터를 받을지 알 방법이 없기때문)</li>\n<li>슬라이스에 포인터 또는 포인터를 포함하는 값을 저장</li>\n<li>append 용량을 초과 하기 때문에 재할당되는 슬라이스 배열을 지원합니다 .</li>\n<li>인터페이스 유형에서 메소드 호출. </li>\n</ul>\n<h2 id=\"포인터\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\"포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포인터</h2>\n<p>대체적으로 값을 복사하는것이 포인터를 사용하는 오버헤드보다 훨씬 저렴</p>\n<h2 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h2>\n<p><a href=\"https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/\">Allocation efficiency in high-performance Go services</a> </p>","frontmatter":{"title":"Golang 할당 효율성","date":"January 02, 2022"}}},"pageContext":{"slug":"/2022/go_allocate/","previous":{"fields":{"slug":"/2021/gracefulstop_with_context/"},"frontmatter":{"title":"Golang 으로 단일 프로세스에서 여러개의 서버를 띄웠을 시 정상 종료 시키기"}},"next":{"fields":{"slug":"/2022/go_heap_stack_allocate_case/"},"frontmatter":{"title":"Golang 힙 & 스택 할당 케이스"}}}},"staticQueryHashes":["2486386679","3128451518"]}